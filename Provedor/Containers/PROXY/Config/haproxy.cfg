global
  log stdout format raw local0
  master-worker
  maxconn 2000
  ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
  ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256

defaults
  log     global
  mode    http
  option  httplog
  option  forwardfor
  option  http-keep-alive
  timeout connect 5s
  timeout client  60s
  timeout server  60s
  http-reuse safe

# --- resolvers: DNS do Docker para nomes de containers ---
resolvers docker
    nameserver d1 127.0.0.11:53
    resolve_retries 3
    timeout resolve 1s
    timeout retry 1s
    hold valid 5s

frontend fe_https
  bind *:80
  # use lista explícita de certificados .pem
  bind *:443 ssl crt-list /etc/haproxy/certs/crt-list.txt alpn h2,http/1.1

  # ===== Rate-limit com exceções =====
  stick-table type ip size 100k expire 10m store http_req_rate(10s)
  http-request track-sc0 src
  acl too_fast sc0_http_req_rate gt 50

  # --- ACME e exceções de WordPress admin/login ---
  acl acme_challenge path_beg /.well-known/acme-challenge/
  acl wp_admin path_beg -i /cms/wp-login.php /cms/wp-admin

  # Só retorna 429 se NÃO for ACME e NÃO for admin/login
  http-request deny deny_status 429 if too_fast !wp_admin !acme_challenge

  # --- ACLs de hosts ---
  # Hosts do provedor
  acl host_portal  hdr(host) -i cafeekernel.com www.cafeekernel.com portal.cafeekernel.com
  acl host_webmail hdr(host) -i webmail.cafeekernel.com

  # Clientes (SNI/host termina com o domínio do cliente)
  acl host_c1 hdr_end(host) -i .bolachaekernel.com
  acl host_c2 hdr_end(host) -i .chaekernel.com
  acl host_c3 hdr_end(host) -i .bolachacombiscoito.com

  # Métodos permitidos (exceto ACME)
  acl allowed_methods method GET POST HEAD OPTIONS
  http-request deny if !allowed_methods !acme_challenge

  # X-Forwarded-Proto
  http-request set-header X-Forwarded-Proto https if { ssl_fc }

  # Redirecionar HTTP->HTTPS (exceto ACME no HTTP)
  http-request redirect scheme https code 301 if !{ ssl_fc } !acme_challenge

  # --- Escolha de backend (depois das http-request rules) ---
  use_backend be_acme       if acme_challenge
  use_backend be_webmail    if host_webmail
  use_backend be_cliente1   if host_c1
  use_backend be_cliente2   if host_c2
  use_backend be_cliente3   if host_c3
  default_backend be_isp_portal

  # Headers de segurança (sem CSP global)
  http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
  http-response set-header X-Content-Type-Options "nosniff"
  http-response set-header X-Frame-Options "DENY"
  http-response set-header Referrer-Policy "no-referrer"
  # (CSP definida apenas no backend do portal)

backend be_acme
  mode http
  server acme acme:80 check resolvers docker init-addr none

backend be_isp_portal
  mode http
  http-request return status 200 content-type "text/html" file /usr/local/etc/haproxy/www/portal.html
  # CSP só para o portal do provedor
  http-response set-header Content-Security-Policy "default-src 'self'"

backend be_webmail
  mode http
  http-request return status 200 content-type "text/plain" lf-string "OK: ISP webmail (placeholder)"

backend be_cliente1
  mode http
  option httpchk GET /
  default-server resolvers docker resolve-prefer ipv4 init-addr last,libc,none check inter 2s fall 3 rise 2
  server c1 c1-proxy:80

backend be_cliente2
  mode http
  option httpchk GET /
  default-server resolvers docker resolve-prefer ipv4 init-addr last,libc,none check inter 2s fall 3 rise 2
  server c2 c2-proxy:80

backend be_cliente3
  mode http
  option httpchk GET /
  default-server resolvers docker resolve-prefer ipv4 init-addr last,libc,none check inter 2s fall 3 rise 2
  server c3 c3-proxy:80
